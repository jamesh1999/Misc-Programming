INIT: |
  def topLevelType(symbol):
    if isinstance(symbol, str):
      return SYMBOLS.query([symbol, "type"])[-1][1]
    else:
      return symbol.output_type[-1][1]

  def bottomLevelType(symbol):
    if isinstance(symbol, str):
      return SYMBOLS.query([symbol, "type"])[0][1]
    else:
      return symbol.output_type[0][1]

  def scopeOffset():
    return SYMBOLS.query(["SCOPE_OFFSET"])

TEMPLATES:
  - SETUP:
    -
      default: true
      template: |
        //Setup assembly
        import setup
        import print

  - START:
    -
      default: true
      template: |
        //Start program
        Add $1 ZERO ZERO
        Add $2 ZERO ZERO

  - END:
    -
      default: true
      template: |
        //Call program
        Call :main
        //Print result
        Lw $1 SP + 12
        Add $3 SP 4
        Set $2 'M'
        Push $2
        Set $2 'a'
        Push $2
        Set $2 'i'
        Push $2
        Set $2 'n'
        Push $2
        Set $2 ' '
        Push $2
        Set $2 'e'
        Push $2
        Set $2 'x'
        Push $2
        Set $2 'i'
        Push $2
        Set $2 't'
        Push $2
        Set $2 'e'
        Push $2
        Set $2 'd'
        Push $2
        Set $2 ' '
        Push $2
        Set $2 'w'
        Push $2
        Set $2 'i'
        Push $2
        Set $2 't'
        Push $2
        Set $2 'h'
        Push $2
        Set $2 ' '
        Push $2
        Set $2 'c'
        Push $2
        Set $2 'o'
        Push $2
        Set $2 'd'
        Push $2
        Set $2 'e'
        Push $2
        Set $2 ':'
        Push $2
        Set $2 ' '
        Push $2, ZERO, $3
        Call :print_str
        Sub SP $3 4
        Push $1
        Call :print_d

  - FINISH:
    -
      default: true
      template: |
        Halt

  - SCOPE_START:
    -
      default: true
      template: |
        Add SP {{scopeOffset()}}

  - SCOPE_END:
    -
      default: true
      template: |
        Sub SP {{scopeOffset()}}

  - stmnt_init:
    -
      default: true
      definition: |
        <type> STRING "=" <expr>
      template: |
        Mov $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        <type> STRING "=" <array>
      template: ''

  - stmnt_func:
    -
      default: true
      template: |
        Goto :SKIP
        >{{STRING:id}}
        {{<func_scope>}}
        :SKIP

  - stmnt_call:
    -
      default: true
      template: |
        Mov $1 SP
        Add SP 8
        {{<parameters>}}
        Mov SP $1
        Call :{{STRING:id}}
        Lw @ SP + 12
    -
      default: false
      definition: |
        "printi(" <term> ")"
      template: |
        Push @<term>
        Call :print_d
    -
      default: false
      definition: |
        "printf(" <term> ")"
      template: |
        Push ZERO
        Call :print_str

  - stmnt_flow_while:
    -
      default: true
      template: |
        :LOOP
        {{<expr>}}
        Branch (@<expr> == ZERO) :ENDLOOP
        {{<statement>}}
        Goto :LOOP
        :ENDLOOP

  - stmnt_flow_for:
    -
      default: true
      template: |
        :LOOP
        {{<expr>}}
        Branch (@<expr> == ZERO) :ENDLOOP
        {{<statement>}}
        {{<stmnt_assign>}}
        Goto :LOOP
        :ENDLOOP

  - stmnt_flow_if:
    -
      default: true
      template: |
        Branch (@<expr> == ZERO) :END
        {{<statement>}}
        :END

  - stmnt_flow_break:
    -
      default: true
      template: |
        Goto :ENDLOOP

  - stmnt_flow_continue:
    -
      default: true
      template: |
        Goto :LOOP

  - stmnt_flow_return:
    -
      default: true
      template: |
        Sub SP {{scopeOffset()}}
        Ret
    -
      default: false
      definition: |
        "return" <expr> ";"
      template: |
        Sub SP {{scopeOffset()}}
        Sw @<expr> FP + 0
        Ret

  - parameters:
    -
      default: true
      template: |
        Push @<expr>

  - expr_assign:
    -
      default: false
      definition: |
        STRING "=" <expr>
      template: |
        Mov $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "=" <expr>
      conditions: topLevelType(STRING) in ["char", "bool"]
      template: |
        Mov $1 @<expr>
        Sb $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "+=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Add $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "-=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Sub $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "*=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Mul $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "/=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Div $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "%=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Rem $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "<<=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Shl $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING ">>=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Shr $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "&=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        And $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "^=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Xor $1 @<expr>
        Sw $1 FP {{STRING:addr}}
    -
      default: false
      definition: |
        STRING "|=" <expr>
      template: |
        Lw $1 FP {{STRING:addr}}
        Or $1 @<expr>
        Sw $1 FP {{STRING:addr}}

  - expr_logical_or:
    -
      default: false
      definition: |
        <expr_logical_or> "||" <expr_logical_and>
      template: |
        Or @ @<expr_logical_or> @<expr_logical_and>

  - expr_logical_or:
    -
      default: false
      definition: |
        <expr_logical_or> "||" <expr_logical_and>
      template: |
        Or @ @<expr_logical_or> @<expr_logical_and>

  - expr_logical_and:
    -
      default: false
      definition: |
        <expr_logical_and> "&&" <expr_bitwise_or>
      template: |
        Branch (@<expr_logical_and> == ZERO) :RET_ZERO
        Branch (@<expr_bitwise_or> == ZERO) :RET_ZERO
        Not @ ZERO
        Goto :END
        :RET_ZERO
        Mov @ ZERO
        :END

  - expr_bitwise_or:
    -
      default: false
      definition: |
        <expr_bitwise_or> "|" <expr_bitwise_and>
      template: |
        Or @ @<expr_bitwise_or> @<expr_bitwise_and>

  - expr_bitwise_and:
    -
      default: false
      definition: |
        <expr_bitwise_and> "&" <expr_conditional>
      template: |
        And @ @<expr_bitwise_and> @<expr_conditional>

  - expr_conditional:
    -
      default: false
      definition: |
        <expr_conditional> "==" <expr_shift>
      template: |
        Branch (@<expr_conditional> == @<expr_shift>) :RET_ONE
        Mov @ ZERO
        Goto :END
        :RET_ONE
        Not @ ZERO
        :END
    -
      default: false
      definition: |
        <expr_conditional> "!=" <expr_shift>
      template: |
        Branch (@<expr_conditional> != @<expr_shift>) :RET_ONE
        Mov @ ZERO
        Goto :END
        :RET_ONE
        Not @ ZERO
        :END
    -
      default: false
      definition: |
        <expr_conditional> ">" <expr_shift>
      template: |
        Branch (@<expr_conditional> > @<expr_shift>) :RET_ONE
        Mov @ ZERO
        Goto :END
        :RET_ONE
        Not @ ZERO
        :END
    -
      default: false
      definition: |
        <expr_conditional> "<" <expr_shift>
      template: |
        Branch (@<expr_conditional> < @<expr_shift>) :RET_ONE
        Mov @ ZERO
        Goto :END
        :RET_ONE
        Not @ ZERO
        :END
    -
      default: false
      definition: |
        <expr_conditional> ">=" <expr_shift>
      template: |
        Branch (@<expr_conditional> >= @<expr_shift>) :RET_ONE
        Mov @ ZERO
        Goto :END
        :RET_ONE
        Not @ ZERO
        :END
    -
      default: false
      definition: |
        <expr_conditional> "<=" <expr_shift>
      template: |
        Branch (@<expr_conditional> <= @<expr_shift>) :RET_ONE
        Mov @ ZERO
        Goto :END
        :RET_ONE
        Not @ ZERO
        :END

  - expr_shift:
    -
      default: false
      definition: |
        <expr_shift> ">>" <expr_add>
      template: |
        Shr @ @<expr_shift> @<expr_add>
    -
      default: false
      definition: |
        <expr_shift> "<<" <expr_add>
      template: |
        Shl @ @<expr_shift> @<expr_add>

  - expr_add:
    -
      default: false
      definition: |
        <expr_add> "+" <expr_mul>
      template: |
        Add @ @<expr_add> @<expr_mul>
    -
      default: false
      definition: |
        <expr_add> "-" <expr_mul>
      template: |
        Sub @ @<expr_add> @<expr_mul>

  - expr_mul:
    -
      default: false
      definition: |
        <expr_mul> "*" <expr_unary>
      template: |
        Mul @ @<expr_mul> @<expr_unary>
    -
      default: false
      definition: |
        <expr_mul> "/" <expr_unary>
      template: |
        Div @ @<expr_mul> @<expr_unary>
    -
      default: false
      definition: |
        <expr_mul> "%" <expr_unary>
      template: |
        Rem @ @<expr_mul> @<expr_unary>

  - expr_unary:
    -
      default: false
      definition: |
        "&" <expr_unary>
      template: ''
    -
      default: false
      definition: |
        "*" <expr_unary>
      template: ''
    -
      default: false
      definition: |
        "!" <expr_unary>
      template: |
        Branch (@<expr_unary> == ZERO) :RET_ONE
        Mov @ ZERO
        Goto :END
        :RET_ONE
        Not @ ZERO
        :END
    -
      default: false
      definition: |
        "~" <expr_unary>
      template: |
        Not @ @<expr_unary>
    -
      default: false
      definition: |
        "-" <expr_unary>
      template: |
        Sub @ ZERO @<expr_unary>
    -
      default: false
      definition: |
        "(" <type> ")" <expr_unary>
      template: ''

  - term:
    -
      default: false
      definition: |
        INT
      template: |
        Add @ ZERO INT
    -
      default: false
      definition: |
        "true"
      template: |
        Add @ ZERO 1
    -
      default: false
      definition: |
        "false"
      template: |
        Add @ ZERO 0
    -
      default: false
      definition: |
        STRING
      template: |
        Lw $1 FP {{STRING:addr}}
        Mov @ $1