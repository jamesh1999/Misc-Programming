#include <string>
#include <iostream>
#include "Globals.h"
#include "Bigrams.h"
#include "Trigrams.h"
#include "Quadgrams.h"

#define TO_INT(chr) (chr - 'A')

float ENGLISH_IC = 0.067f;
float ENGLISH_IC_DIFFERENCE = 0.005f;
float TEMP = 20.0f;
float STEP = 0.1f;
unsigned COUNT = 10000;
int LENGTH = 4;

CipherData CIPHERS[MAX_CIPHER] = {{"Amsco", 26, 63, 72, 94, 44, 43, 11, 50, 688, 188, false},
                                  {"Bifid", 25, 47, 58, 77, 24, 23, 7, 49, 517, 118, false},
                                  {"Binary Conversion", 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, false},
                                  {"Cadenus", 26, 63, 74, 95, 40, 41, 10, 49, 657, 134, true},
                                  {"Columnar Transposition", 26, 63, 73, 96, 41, 41, 11, 50, 653, 128, true},
                                  {"Foursquare", 26, 48, 58, 76, 36, 72, 11, 28, 507, 114, false},
                                  {"Hill", 26, 63, 72, 94, 44, 43, 11, 50, 688, 188, false}, //
                                  {"Playfair", 25, 50, 60, 79, 38, 72, 12, 32, 491, 118, false},
                                  {"Polybius Square", 25, 63, 72, 94, 44, 43, 11, 50, 688, 188, false}, //
                                  {"Rail Fence", 26, 63, 72, 94, 44, 43, 11, 50, 688, 188, true}, //
                                  {"Simple Substitution", 26, 63, 73, 95, 72, 73, 22, 50, 450, 120, false},
                                  {"Trifid", 27, 42, 53, 68, 18, 18, 6, 51, 462, 112, false},
                                  {"Vigenere", 26, 42, 65, 74, 22, 26, 8, 42, 438, 106, false}};

int LDI_ARR[26][26] = {{4,7,8,7,4,6,7,5,7,3,6,8,7,9,3,7,3,9,8,9,6,7,6,5,7,4},
                         {7,4,2,0,8,1,1,1,6,3,0,7,2,1,7,1,0,6,5,3,7,1,2,0,6,0},
                         {8,2,5,2,7,3,2,8,7,2,7,6,2,1,8,2,2,6,4,7,6,1,3,0,4,0},
                         {7,6,5,6,8,6,5,5,8,4,3,6,6,5,7,5,3,6,7,7,6,5,6,0,6,2},
                         {9,7,8,8,8,7,6,6,7,4,5,8,7,9,7,7,5,9,9,8,5,7,7,6,7,3},
                         {7,4,5,3,7,6,4,4,7,2,2,6,5,3,8,4,0,7,5,7,6,2,4,0,5,0},
                         {7,5,5,4,7,5,5,7,7,3,2,6,5,5,7,5,2,7,6,6,6,3,5,0,5,1},
                         {8,5,4,4,9,4,3,4,8,3,1,5,5,4,8,4,2,6,5,7,6,2,5,0,5,0},
                         {7,5,8,7,7,7,7,4,4,2,5,8,7,9,7,6,4,7,8,8,4,7,3,5,0,5},
                         {5,0,0,0,4,0,0,0,3,0,0,0,0,0,5,0,0,0,0,0,6,0,0,0,0,0},
                         {5,4,3,2,7,4,2,4,6,2,2,4,3,6,5,3,1,3,6,5,3,0,4,0,5,0},
                         {8,5,5,7,8,5,4,4,8,2,5,8,5,4,8,5,2,4,6,6,6,5,5,0,7,1},
                         {8,6,4,3,8,4,2,4,7,1,0,4,6,4,7,6,1,3,6,5,6,1,4,0,6,0},
                         {8,6,7,8,8,6,9,6,8,4,6,6,5,6,8,5,3,5,8,9,6,5,6,3,6,2},
                         {6,6,7,7,6,8,6,6,6,3,6,7,8,9,7,7,3,9,7,8,9,6,8,4,5,3},
                         {7,3,3,3,7,3,2,6,7,2,1,7,3,2,7,6,0,7,6,6,6,0,3,0,4,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0},
                         {8,6,6,7,9,6,6,5,8,3,6,6,6,6,8,6,3,6,8,8,6,5,6,0,7,1},
                         {8,6,7,6,8,6,5,7,8,4,6,6,6,6,8,7,4,5,8,9,7,4,7,0,6,2},
                         {8,6,6,5,8,6,5,9,8,3,3,6,6,5,9,6,2,7,8,8,7,4,7,0,7,2},
                         {6,6,7,6,6,4,6,4,6,2,3,7,7,8,5,6,0,8,8,8,3,3,4,3,4,3},
                         {6,1,0,0,8,0,0,0,7,0,0,0,0,0,5,0,0,0,1,0,2,1,0,0,3,0},
                         {7,3,3,4,7,3,2,8,7,2,2,4,4,6,7,3,0,5,5,5,2,1,4,0,3,1},
                         {4,1,4,2,4,2,0,3,5,1,0,1,1,0,3,5,0,1,2,5,2,0,2,2,3,0},
                         {6,6,6,6,6,6,5,5,6,3,3,5,6,5,8,6,3,5,7,6,4,3,6,2,4,2},
                         {4,0,0,0,5,0,0,0,3,0,0,2,0,0,3,0,0,0,1,0,2,0,0,0,4,4}};

int SDD_ARR[26][26] = {{0,3,4,2,0,0,1,0,0,0,4,5,2,6,0,2,0,4,4,3,0,6,0,0,3,5},
                    {0,0,0,0,6,0,0,0,0,9,0,7,0,0,0,0,0,0,0,0,7,0,0,0,7,0},
                    {3,0,0,0,2,0,0,6,0,0,8,0,0,0,6,0,5,0,0,0,3,0,0,0,0,0},
                    {1,6,0,0,1,0,0,0,4,4,0,0,0,0,0,0,0,0,0,1,0,0,4,0,1,0},
                    {0,0,4,5,0,0,0,0,0,3,0,0,3,2,0,3,6,5,4,0,0,4,3,8,0,0},
                    {3,0,0,0,0,5,0,0,2,1,0,0,0,0,5,0,0,2,0,4,1,0,0,0,0,0},
                    {2,0,0,0,1,0,0,6,1,0,0,0,0,0,2,0,0,1,0,0,2,0,0,0,0,0},
                    {5,0,0,0,7,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,5,0,0,0,4,0,0,0,1,1,3,7,0,0,0,0,5,3,0,5,0,0,0,8},
                    {0,0,0,0,6,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,9,0,0,0,0,0},
                    {0,0,0,0,6,0,0,0,5,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,0},
                    {2,0,0,4,2,0,0,0,3,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,7,0},
                    {5,5,0,0,5,0,0,0,2,0,0,0,0,0,2,6,0,0,0,0,2,0,0,0,6,0},
                    {0,0,4,7,0,0,8,0,0,2,2,0,0,0,0,0,3,0,0,4,0,0,0,0,0,0},
                    {0,2,0,0,0,8,0,0,0,0,4,0,5,5,0,2,0,4,0,0,7,4,5,0,0,0},
                    {3,0,0,0,3,0,0,0,0,0,0,5,0,0,5,7,0,6,0,0,3,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0},
                    {1,0,0,0,4,0,0,0,2,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,5,0},
                    {1,1,0,0,0,0,0,1,2,0,0,0,0,0,1,4,4,0,1,4,2,0,4,0,0,0},
                    {0,0,0,0,0,0,0,8,3,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0},
                    {0,4,3,0,0,0,5,0,0,0,0,6,2,3,0,6,0,6,5,3,0,0,0,0,0,6},
                    {0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {6,0,0,0,2,0,0,6,6,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0},
                    {3,0,7,0,1,0,0,0,2,0,0,0,0,0,0,9,0,0,0,5,0,0,0,6,0,0},
                    {1,6,2,0,0,2,0,0,0,6,0,0,2,0,6,2,1,0,2,1,0,0,6,0,0,0},
                    {2,0,0,0,8,0,0,0,0,6,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,9}};



//Calculates IC for string text
double indexCoincidence(const std::string& text)
{
    double ic = 0;

	//Sum of f(f-1) for each letter
    for(unsigned i=0; i<27; ++i)
	{
		char letter = 'A'+i;
		long cnt = 0;

		//Count frequency of letter
		for(auto l : text)
		{
			if(l == letter)
				++cnt;
		}

        ic += cnt*(cnt-1);
	}

    return ic/(text.length()*(text.length()-1));
}



//Score text based on ngram frequencies
double evaluate(const std::string& text)
{
	double score = 0;

    switch(LENGTH)
	{
    case 2:
        for(unsigned i = 0; i<text.length()-LENGTH+1; ++i)
        {
			if (text[i] == '#' || text[i + 1] == '#')
				score -= 9;
			else
                score += bigram_freq[TO_INT(text[i]) * 26 + TO_INT(text[i + 1])];
		}
        break;

    case 3:
        for(unsigned i = 0; i<text.length()-LENGTH+1; ++i)
        {
            if (text[i] == '#' || text[i + 1] == '#' || text[i + 2] == '#')
                score -= 10;
            else
                score += trigram_freq[TO_INT(text[i]) * 676 + TO_INT(text[i + 1]) * 26 + TO_INT(text[i + 2])];
        }
        break;

    case 4:
        for(unsigned i = 0; i<text.length()-LENGTH+1; ++i)
        {
            if (text[i] == '#' || text[i + 1] == '#' || text[i + 2] == '#' || text[i + 3] == '#')
                score -= 13;
            else
                score += quadgram_freq[TO_INT(text[i]) * 17576 + TO_INT(text[i + 1]) * 676 + TO_INT(text[i + 2]) * 26 + TO_INT(text[i + 3])];
        }
        break;
	}

	return score;
}
